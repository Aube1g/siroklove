import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InputTextMessageContent
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    InlineQueryHandler
)
from telegram.error import BadRequest, TelegramError
import sqlite3
import asyncio
import itertools
import random
import uuid
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATABASE_NAME = "love_bot.db"
HEART_ANIMATION_FRAMES = [
    "‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç", "üíñ",
    "üíó", "üíì", "üíû", "üíï", "üíò", "üíù", "üíü"
]

# –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
INLINE_ACTIONS = {
    "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": {"emoji": "üíã", "description": "–ü–æ—Å–ª–∞—Ç—å –Ω–µ–∂–Ω—ã–π –ø–æ—Ü–µ–ª—É–π", "action": "kiss"},
    "–æ–±–Ω—è—Ç—å": {"emoji": "ü§ó", "description": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ø–ª—ã–µ –æ–±—ä—è—Ç–∏—è", "action": "hug"}, 
    "–ø–æ–≥–ª–∞–¥–∏—Ç—å": {"emoji": "üñêÔ∏è", "description": "–ü–æ–≥–ª–∞–¥–∏—Ç—å –ø–æ –≥–æ–ª–æ–≤–∫–µ", "action": "pat"},
    "–ø—Ä–∏–∂–∞—Ç—å—Å—è": {"emoji": "ü´Ç", "description": "–ü—Ä–∏–∂–∞—Ç—å—Å—è –∏ –æ–±–Ω–∏–º–∞—Ç—å—Å—è", "action": "cuddle"},
    "–ª—é–±–ª—é": {"emoji": "üíå", "description": "–ü—Ä–∏–∑–Ω–∞—Ç—å—Å—è –≤ –ª—é–±–≤–∏", "action": "love"},
    "—É–ª—ã–±–Ω—É—Ç—å—Å—è": {"emoji": "üòÑ", "description": "–ü–æ–¥–∞—Ä–∏—Ç—å —É–ª—ã–±–∫—É", "action": "smile"},
    "–ø–æ–¥–º–∏–≥–Ω—É—Ç—å": {"emoji": "üòâ", "description": "–ü–æ–¥–º–∏–≥–Ω—É—Ç—å –∏–≥—Ä–∏–≤–æ", "action": "wink"},
    "—Å–µ—Ä–¥—Ü–µ": {"emoji": "‚ù§Ô∏è", "description": "–ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞", "action": "heart"},
    "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å": {"emoji": "üíë", "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "action": "compatibility"},
    "–∞–Ω–æ–Ω–∏–º–∫–∞": {"emoji": "üìù", "description": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–ø–∏—Å–∫—É", "action": "anonymous_note"}
}

ACTION_TEXTS = {
    "kiss": "üíã –ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)",
    "hug": "ü§ó –æ–±–Ω—è–ª(–∞)",
    "pat": "üñêÔ∏è –ø–æ–≥–ª–∞–¥–∏–ª(–∞)",
    "cuddle": "ü´Ç –ø—Ä–∏–∂–∞–ª—Å—è(–∞—Å—å) –∫",
    "love": "üíå –ø—Ä–∏–∑–Ω–∞–ª—Å—è(–∞—Å—å) –≤ –ª—é–±–≤–∏",
    "smile": "üòÑ —É–ª—ã–±–Ω—É–ª—Å—è(–∞—Å—å)",
    "wink": "üòâ –ø–æ–¥–º–∏–≥–Ω—É–ª(–∞)"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
animation_jobs = {}

# ========================
#  –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ========================
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        full_name TEXT,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS anonymous_notes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        sender_id INTEGER NOT NULL,
        recipient_id INTEGER NOT NULL,
        message_text TEXT NOT NULL,
        sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

def get_db_connection():
    conn = sqlite3.connect(DATABASE_NAME)
    conn.row_factory = sqlite3.Row
    return conn

def register_user(user):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user.id,))
    existing_user = cursor.fetchone()
    
    if not existing_user:
        cursor.execute('''
        INSERT INTO users (user_id, username, first_name, full_name)
        VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.full_name))
        conn.commit()
    
    conn.close()

def find_user_id(username):
    username = username.lower().strip()
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE LOWER(username) = ?', (username,))
    user = cursor.fetchone()
    conn.close()
    return user['user_id'] if user else None

def get_user_info(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        return {
            'user_id': user['user_id'],
            'username': user['username'],
            'first_name': user['first_name'],
            'full_name': user['full_name']
        }
    return None

def add_anonymous_note(sender_id, recipient_id, message_text):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
        INSERT INTO anonymous_notes (sender_id, recipient_id, message_text)
        VALUES (?, ?, ?)
        ''', (sender_id, recipient_id, message_text))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏: {str(e)}")
        return False
    finally:
        conn.close()

# ========================
#  –ê–ù–ò–ú–ê–¶–ò–Ø –°–ï–†–î–¶–ê
# ========================
async def safe_edit_message(context, chat_id, message_id, text, reply_markup=None):
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

async def animate_hearts(context: ContextTypes.DEFAULT_TYPE):
    try:
        job = context.job
        frame = next(job.data['frame_iterator'])
        await safe_edit_message(
            context,
            job.data['chat_id'],
            job.data['message_id'],
            f"{frame}\n–Ø —Ç–µ–±—è –ª—é–±–ª—é <3",
            job.data['reply_markup']
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
        job.schedule_removal()
        chat_id = job.data['chat_id']
        if chat_id in animation_jobs:
            animation_jobs.pop(chat_id, None)

async def send_heart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    register_user(user)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    if chat_id in animation_jobs:
        old_job = animation_jobs[chat_id]
        old_job.schedule_removal()
        animation_jobs.pop(chat_id, None)
        await asyncio.sleep(0.5)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üíñ –û—Ç–≤–µ—Ç–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é", callback_data="heart_respond")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="heart_reject")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await context.bot.send_message(
        chat_id=chat_id,
        text="‚ù§Ô∏è\n–Ø —Ç–µ–±—è –ª—é–±–ª—é <3",
        reply_markup=reply_markup
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫–∞–¥—Ä–æ–≤
    frame_iterator = itertools.cycle(HEART_ANIMATION_FRAMES)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    job = context.job_queue.run_repeating(
        animate_hearts,
        interval=0.8,
        first=0,
        data={
            'frame_iterator': frame_iterator,
            'chat_id': chat_id,
            'message_id': msg.message_id,
            'reply_markup': reply_markup
        },
        name=f"heart_anim_{chat_id}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    animation_jobs[chat_id] = job

async def handle_heart_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if chat_id in animation_jobs:
        job = animation_jobs[chat_id]
        job.schedule_removal()
        animation_jobs.pop(chat_id, None)
    
    if query.data == "heart_respond":
        await query.edit_message_text(
            f"üíñ {user.first_name} –æ—Ç–≤–µ—Ç–∏–ª(–∞) –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é –Ω–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏! üíï"
        )
    elif query.data == "heart_reject":
        await query.edit_message_text(
            f"üíî {user.first_name} –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è(–∞—Å—å) –æ—Ç –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –≤ –ª—é–±–≤–∏..."
        )

# ========================
#  –ê–ù–û–ù–ò–ú–ù–´–ï –ó–ê–ü–ò–°–ö–ò
# ========================
async def start_anonymous_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    register_user(user)
    
    if not context.args:
        await update.message.reply_text(
            "üìù *–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
            "`/note @username –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/note @username –¢—ã —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è! üíñ`\n\n"
            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∑–Ω–∞–µ—Ç, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø–∏—Å–∫—É!",
            parse_mode="Markdown"
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    
    username = context.args[0].lstrip('@').strip().lower()
    message_text = ' '.join(context.args[1:])
    
    if len(message_text) > 500:
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    target_id = find_user_id(username)
    
    if not target_id:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if user.id == target_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∫—É –≤ –±–∞–∑—É
    success = add_anonymous_note(user.id, target_id, message_text)
    
    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        try:
            target_info = get_user_info(target_id)
            target_name = target_info['first_name'] if target_info else f"@{username}"
            
            await context.bot.send_message(
                chat_id=target_id,
                text=f"üíå *–í–∞–º –∞–Ω–æ–Ω–∏–º–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞!*\n\n"
                     f"_{message_text}_\n\n"
                     f"üíù –ö—Ç–æ-—Ç–æ –¥—É–º–∞–µ—Ç –æ —Ç–µ–±–µ, {target_name}!",
                parse_mode="Markdown"
            )
            
            await update.message.reply_text(
                "‚úÖ –ó–∞–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ! üíù"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∫–∏: {str(e)}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∫—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∏—Å–∫–∏.")

# ========================
#  –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
# ========================
async def start_compatibility(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    register_user(user)
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üíë *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º!*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /compatibility @username\n"
            "–ü—Ä–∏–º–µ—Ä: /compatibility @username_–ª—é–±–∏–º–æ–≥–æ",
            parse_mode="Markdown"
        )
        return
        
    username = args[0].lstrip('@').strip().lower()
    partner_id = find_user_id(username)
    
    if not partner_id:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if user.id == partner_id:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π! üòâ")
        return
        
    user1_info = get_user_info(user.id)
    user2_info = get_user_info(partner_id)
    
    user1_name = user1_info['first_name'] if user1_info else user.first_name
    user2_name = user2_info['first_name'] if user2_info else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {partner_id}"
    
    message = await update.message.reply_text(
        f"üîÆ *–†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*\n\n"
        f"{user1_name} ‚ù§Ô∏è {user2_name}\n\n"
        "‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞ 0%",
        parse_mode="Markdown"
    )
    
    context.job_queue.run_once(
        calculate_compatibility, 
        3, 
        data={
            'chat_id': update.effective_chat.id,
            'message_id': message.message_id,
            'user1_id': user.id,
            'user2_id': partner_id,
            'user1_name': user1_name,
            'user2_name': user2_name
        }
    )

async def calculate_compatibility(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    data = job.data
    
    compatibility = random.randint(70, 99)
    progress = "üü•" * 10
    progress_bar = progress[:compatibility//10].replace("üü•", "üü©") + progress[compatibility//10:]
    
    descriptions = [
        "–í–∞—à–∏ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω!",
        "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –¥—É—à!",
        "–ù–µ–±–µ—Å–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∏–ª–∏ –≤–∞—Å –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞!",
        "–í–∞—à–∞ —Å–≤—è–∑—å –æ—Å–æ–±–µ–Ω–Ω–∞—è –∏ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è!",
        "–ù–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–¥–æ–ª–µ–µ—Ç –≤—Å–µ –ø—Ä–µ–≥—Ä–∞–¥—ã!"
    ]
    
    await context.bot.edit_message_text(
        chat_id=data['chat_id'],
        message_id=data['message_id'],
        text=(
            f"üíñ *–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!*\n\n"
            f"{data['user1_name']} ‚ù§Ô∏è {data['user2_name']}\n\n"
            f"‚ñ∞{progress_bar}‚ñ∞ {compatibility}%\n\n"
            f"_{random.choice(descriptions)}_"
        ),
        parse_mode="Markdown"
    )

# ========================
#  –ò–ù–õ–ê–ô–ù-–†–ï–ñ–ò–ú
# ========================
async def handle_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.lower().strip()
    user = update.inline_query.from_user
    
    register_user(user)
    results = []
    
    if not query:
        for action_name, info in INLINE_ACTIONS.items():
            message_text = f"{info['emoji']} {user.first_name} {action_name}!"
            
            keyboard = [
                [InlineKeyboardButton("üíñ –û—Ç–≤–µ—Ç–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é", callback_data=f"inline_respond_{info['action']}_{user.id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"inline_reject_{user.id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title=f"{info['emoji']} {action_name.capitalize()}",
                    description=info['description'],
                    input_message_content=InputTextMessageContent(
                        message_text=message_text,
                        parse_mode=None
                    ),
                    reply_markup=reply_markup
                )
            )
    else:
        for action_name, info in INLINE_ACTIONS.items():
            if query in action_name:
                message_text = f"{info['emoji']} {user.first_name} {action_name}!"
                
                keyboard = [
                    [InlineKeyboardButton("üíñ –û—Ç–≤–µ—Ç–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é", callback_data=f"inline_respond_{info['action']}_{user.id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"inline_reject_{user.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                results.append(
                    InlineQueryResultArticle(
                        id=str(uuid.uuid4()),
                        title=f"{info['emoji']} {action_name.capitalize()}",
                        description=info['description'],
                        input_message_content=InputTextMessageContent(
                            message_text=message_text,
                            parse_mode=None
                        ),
                        reply_markup=reply_markup
                    )
                )
    
    if not results:
        results.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å, –æ–±–Ω—è—Ç—å, –ø–æ–≥–ª–∞–¥–∏—Ç—å...",
                input_message_content=InputTextMessageContent(
                    message_text="üíñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!",
                    parse_mode=None
                )
            )
        )
    
    try:
        await update.inline_query.answer(results, cache_time=0, is_personal=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

# ========================
#  –ö–û–ú–ê–ù–î–´ –° –Æ–ó–ï–†–ù–ï–ô–ú–û–ú
# ========================
async def send_cute_action_with_username(update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str, action_text: str):
    user = update.effective_user
    
    if not context.args:
        await update.message.reply_text(
            f"‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /{action_type} @username\n"
            f"–ü—Ä–∏–º–µ—Ä: /{action_type} @–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return
    
    username = context.args[0].lstrip('@').strip().lower()
    target_id = find_user_id(username)
    
    if not target_id:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if user.id == target_id:
        await update.message.reply_text(f"üòä –ù–µ–ª—å–∑—è {action_text.split()[0]} —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return
    
    sender_info = get_user_info(user.id)
    target_info = get_user_info(target_id)
    
    sender_name = sender_info['first_name'] if sender_info else user.first_name
    target_name = target_info['first_name'] if target_info else f"@{username}"
    
    keyboard = [
        [InlineKeyboardButton("üíñ –û—Ç–≤–µ—Ç–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é", callback_data=f"respond_{action_type}_{user.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await update.message.reply_text(
            f"üíû {sender_name} {action_text} {target_name}!",
            reply_markup=reply_markup
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text=f"üíå {sender_name} {action_text} –≤–∞–º!"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def send_kiss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_cute_action_with_username(update, context, "kiss", "üíã –ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)")

async def send_hug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_cute_action_with_username(update, context, "hug", "ü§ó –æ–±–Ω—è–ª(–∞)")

async def send_pat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_cute_action_with_username(update, context, "pat", "üñêÔ∏è –ø–æ–≥–ª–∞–¥–∏–ª(–∞)")

async def send_cuddle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_cute_action_with_username(update, context, "cuddle", "ü´Ç –ø—Ä–∏–∂–∞–ª—Å—è(–∞—Å—å) –∫")

async def send_love(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_cute_action_with_username(update, context, "love", "üíå –ø—Ä–∏–∑–Ω–∞–ª—Å—è(–∞—Å—å) –≤ –ª—é–±–≤–∏")

async def send_smile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_cute_action_with_username(update, context, "smile", "üòÑ —É–ª—ã–±–Ω—É–ª—Å—è(–∞—Å—å)")

async def send_wink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_cute_action_with_username(update, context, "wink", "üòâ –ø–æ–¥–º–∏–≥–Ω—É–ª(–∞)")

# ========================
#  –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
# ========================
async def handle_inline_button_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    data_parts = query.data.split('_')
    
    if len(data_parts) >= 3 and data_parts[0] == "inline":
        action_type = data_parts[2]
        sender_id = int(data_parts[3])
        
        if user.id == sender_id:
            await query.edit_message_text("üòä –ù–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
            
        if data_parts[1] == "respond":
            sender_info = get_user_info(sender_id)
            sender_name = sender_info['first_name'] if sender_info else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id}"
            
            action_text = ACTION_TEXTS.get(action_type, "—Å–¥–µ–ª–∞–ª(–∞) —á—Ç–æ-—Ç–æ –º–∏–ª–æ–µ")
            
            await query.edit_message_text(
                f"üíñ {user.first_name} –æ—Ç–≤–µ—Ç–∏–ª(–∞) –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é –Ω–∞ {action_text} –æ—Ç {sender_name}! üíï"
            )
            
        elif data_parts[1] == "reject":
            await query.edit_message_text(
                f"üíî {user.first_name} –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è(–∞—Å—å)..."
            )

async def handle_regular_button_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    data_parts = query.data.split('_')
    
    if len(data_parts) >= 3 and data_parts[0] == "respond":
        action_type = data_parts[1]
        sender_id = int(data_parts[2])
        
        if user.id == sender_id:
            await query.edit_message_text("üòä –ù–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
            
        sender_info = get_user_info(sender_id)
        sender_name = sender_info['first_name'] if sender_info else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id}"
        
        action_text = ACTION_TEXTS.get(action_type, "—Å–¥–µ–ª–∞–ª(–∞) —á—Ç–æ-—Ç–æ –º–∏–ª–æ–µ")
        
        await query.edit_message_text(
            f"üíñ {user.first_name} –æ—Ç–≤–µ—Ç–∏–ª(–∞) –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é –Ω–∞ {action_text} –æ—Ç {sender_name}! üíï"
        )
            
    elif len(data_parts) >= 2 and data_parts[0] == "reject":
        await query.edit_message_text(
            f"üíî {user.first_name} –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è(–∞—Å—å)..."
        )

# ========================
#  –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    register_user(user)
    
    welcome_text = (
        f"üíñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ –∏ –Ω–µ–∂–Ω—ã—Ö —á—É–≤—Å—Ç–≤! üíï\n\n"
        "‚ú® *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –≤ –ª—é–±–≤–∏ ‚ù§Ô∏è\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∏–ª—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏ üíå\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ üíë\n\n"
        "üíù *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "`/heart` - –ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞\n"
        "`/note @username —Ç–µ–∫—Å—Ç` - –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞\n"
        "`/compatibility @username` - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n"
        "üéÆ *–î–µ–π—Å—Ç–≤–∏—è:*\n"
        "`/kiss @username` - –ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å\n"
        "`/hug @username` - –û–±–Ω—è—Ç—å\n"
        "`/pat @username` - –ü–æ–≥–ª–∞–¥–∏—Ç—å\n"
        "`/love @username` - –ü—Ä–∏–∑–Ω–∞—Ç—å—Å—è –≤ –ª—é–±–≤–∏\n\n"
        "üí¨ *–ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º:*\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ `@{context.bot.username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ!"
    )
    
    await update.message.reply_text(welcome_text, parse_mode="Markdown")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üíñ *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "üíù *–û—Å–Ω–æ–≤–Ω—ã–µ:*\n"
        "`/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "`/heart` - –ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞\n"
        "`/note @username —Ç–µ–∫—Å—Ç` - –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞\n"
        "`/compatibility @username` - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n"
        "üéÆ *–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
        "`/kiss @username` - –ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å üíã\n"
        "`/hug @username` - –û–±–Ω—è—Ç—å ü§ó\n"
        "`/pat @username` - –ü–æ–≥–ª–∞–¥–∏—Ç—å üñêÔ∏è\n"
        "`/cuddle @username` - –ü—Ä–∏–∂–∞—Ç—å—Å—è ü´Ç\n"
        "`/love @username` - –ü—Ä–∏–∑–Ω–∞—Ç—å—Å—è –≤ –ª—é–±–≤–∏ üíå\n"
        "`/smile @username` - –£–ª—ã–±–Ω—É—Ç—å—Å—è üòÑ\n"
        "`/wink @username` - –ü–æ–¥–º–∏–≥–Ω—É—Ç—å üòâ\n\n"
        "üí¨ *–ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º:*\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ `@{context.bot.username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ!"
    )
    
    await update.message.reply_text(help_text, parse_mode="Markdown")

# ========================
#  HTTP –°–ï–†–í–ï–† –î–õ–Ø UPTIMEROBOT
# ========================
from aiohttp import web
import threading

async def handle_health_check(request):
    return web.Response(text="Bot is running!")

def run_http_server():
    app = web.Application()
    app.router.add_get('/', handle_health_check)
    app.router.add_get('/health', handle_health_check)
    
    port = int(os.environ.get('PORT', 8080))
    web.run_app(app, host='0.0.0.0', port=port)

# ========================
#  –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_thread = threading.Thread(target=run_http_server, daemon=True)
    http_thread.start()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    application = Application.builder().token(os.getenv('BOT_TOKEN')).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("heart", send_heart))
    application.add_handler(CommandHandler("note", start_anonymous_note))
    application.add_handler(CommandHandler("compatibility", start_compatibility))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    application.add_handler(CommandHandler("kiss", send_kiss))
    application.add_handler(CommandHandler("hug", send_hug))
    application.add_handler(CommandHandler("pat", send_pat))
    application.add_handler(CommandHandler("cuddle", send_cuddle))
    application.add_handler(CommandHandler("love", send_love))
    application.add_handler(CommandHandler("smile", send_smile))
    application.add_handler(CommandHandler("wink", send_wink))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_heart_response, pattern="^heart_"))
    application.add_handler(CallbackQueryHandler(handle_inline_button_response, pattern="^inline_"))
    application.add_handler(CallbackQueryHandler(handle_regular_button_response, pattern="^(respond|reject)_"))
    
    # –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
    application.add_handler(InlineQueryHandler(handle_inline_query))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å HTTP —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è UptimeRobot!")
    application.run_polling()

if __name__ == '__main__':
    main()
